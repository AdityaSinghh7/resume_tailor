1. Persist Authenticated Users
Goal: When a user logs in via GitHub, store their info in your users table.
How:
After OAuth, fetch the user’s GitHub username (and ideally their GitHub user ID).
Insert or upsert this info into your users table, along with their access token (as access_code).
Return a session token or similar to the frontend for future authenticated requests.
2. Ingest User’s GitHub Projects
Goal: After login, allow the user to select (or automatically fetch) their GitHub repos and ingest their code/README.
How:
Use the GitHub API (with the user’s access token) to list their repositories.
For each selected repo:
Clone/download the repo or fetch its files via the API.
Store the repo’s metadata in the projects table, linking it to the user.
Save the code/README content for further processing (e.g., in a new table or as files).
3. Chunk and Embed Project Data
Goal: Prepare project data for semantic search and RAG.
How:
Chunk the code/README into manageable pieces (e.g., by file, function, or paragraph).
Use OpenAI embeddings to vectorize each chunk.
Store the embeddings and chunk metadata (e.g., in Weaviate or a new DB table).
4. Integrate Weaviate for Vector Storage
Goal: Store and retrieve vector embeddings for semantic search.
How:
Set up a Weaviate instance (locally or in the cloud).
Push your chunk embeddings to Weaviate, with metadata linking back to the project/user.
5. Implement RAG Pipeline
Goal: Rewrite the user’s resume project section based on a job description.
How:
Accept a job description and retrieve relevant project chunks from Weaviate.
Use LlamaIndex (or similar) to generate tailored resume bullets, ensuring traceability.
Return the rewritten section and an alignment score.